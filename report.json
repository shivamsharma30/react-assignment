[{"filePath":"D:\\Boppo\\react-assignment\\.eslintrc.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n    \"env\": {\n        \"browser\": true,\n        \"es2020\": true\n    },\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\"\n    ],\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        },\n        \"ecmaVersion\": 11,\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n    }\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\newReport.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\App.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'newVariable' is defined but never used.","line":13,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":16}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport Cart from \"./pages/Cart\";\r\nimport { ToastProvider } from \"react-toast-notifications\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { Provider } from \"react-redux\";\r\nimport Header from \"./components/Header\";\r\nimport store from \"./store\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nconst hist = createBrowserHistory();\r\nvar newVariable;\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router history={hist}>\r\n        <ToastProvider>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/cart\" component={Cart} />\r\n          </Switch>\r\n        </ToastProvider>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\App.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":9}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n  const { getByText } = render(<App />);\r\n  const linkElement = getByText(/learn react/i);\r\n  expect(linkElement).toBeInTheDocument();\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\actions\\actionTypes.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\actions\\cartAction.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\actions\\productAction.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\api\\productApi.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\CartPrduct\\component.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'product' is missing in props validation","line":10,"column":23,"nodeType":"Property","endLine":10,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'product.name' is missing in props validation","line":11,"column":11,"nodeType":"Property","endLine":11,"endColumn":15},{"ruleId":"react/prop-types","severity":2,"message":"'product.price' is missing in props validation","line":11,"column":17,"nodeType":"Property","endLine":11,"endColumn":22},{"ruleId":"react/prop-types","severity":2,"message":"'product.imgUrl' is missing in props validation","line":11,"column":24,"nodeType":"Property","endLine":11,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'product.selectedQty' is missing in props validation","line":11,"column":32,"nodeType":"Property","endLine":11,"endColumn":43}],"errorCount":5,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { removeProductFromCart } from \"../../actions/cartAction\";\r\nimport \"./CartProduct.scss\";\r\n\r\nconst CartPrduct = ({ product }) => {\r\n  const { name, price, imgUrl, selectedQty } = product;\r\n  const { addToast } = useToasts();\r\n  const dispatch = useDispatch();\r\n  const removeProduct = product => {\r\n    dispatch(removeProductFromCart(product));\r\n    addToast(\"Product Removed\", {\r\n      appearance: \"success\",\r\n      autoDismiss: true\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid className=\"product-cart-wrapper\" item xs={12} sm={4} lg={3}>\r\n      <Paper>\r\n        <img src={imgUrl} alt={name} />\r\n        <div className=\"text-wrapper\">\r\n          <h5>{name}</h5>\r\n          <h5>Price: {price}</h5>\r\n          <h5>SelectedQty: {selectedQty}</h5>\r\n          <h5>Total Price: {price * selectedQty}</h5>\r\n          <Button\r\n            onClick={() => removeProduct(product)}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Remove\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CartPrduct;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\CartPrduct\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\Header\\component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\Header\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\ProductCard\\component.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'product' is missing in props validation","line":11,"column":24,"nodeType":"Property","endLine":11,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'product.name' is missing in props validation","line":12,"column":11,"nodeType":"Property","endLine":12,"endColumn":15},{"ruleId":"react/prop-types","severity":2,"message":"'product.price' is missing in props validation","line":12,"column":17,"nodeType":"Property","endLine":12,"endColumn":22},{"ruleId":"react/prop-types","severity":2,"message":"'product.imgUrl' is missing in props validation","line":12,"column":24,"nodeType":"Property","endLine":12,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'product.availableQty' is missing in props validation","line":12,"column":32,"nodeType":"Property","endLine":12,"endColumn":44}],"errorCount":5,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport NumericInput from \"react-numeric-input\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProductInCart } from \"../../actions/cartAction\";\r\nimport \"./ProductCard.scss\";\r\n\r\nconst ProductCard = ({ product }) => {\r\n  const { name, price, imgUrl, availableQty } = product;\r\n  const dispatch = useDispatch();\r\n  const { addToast } = useToasts();\r\n  const [selectedQty, setSelectedQty] = useState(1);\r\n\r\n  const addProductToCart = product => {\r\n    dispatch(addProductInCart({ ...product, selectedQty }));\r\n    addToast(\"Product Added Successfully\", {\r\n      appearance: \"success\",\r\n      autoDismiss: true\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid className=\"product-card-wrapper\" item xs={12} sm={4} lg={3}>\r\n      <Paper>\r\n        <img src={imgUrl} alt={name} />\r\n        <div className=\"text-wrapper\">\r\n          <h5>{name}</h5>\r\n          <h5>price : {price}</h5>\r\n          <h5>Total Price: {price * selectedQty}</h5>\r\n          <NumericInput\r\n            value={selectedQty}\r\n            onChange={e => {\r\n              setSelectedQty(e);\r\n            }}\r\n            min={1}\r\n            max={availableQty}\r\n            mobile\r\n          />\r\n          <Button\r\n            onClick={() => addProductToCart(product)}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Add to Cart\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\components\\ProductCard\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\pages\\Cart\\component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\pages\\Cart\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\pages\\Home\\component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\pages\\Home\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\reducers\\cartInfo.js","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":13,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":15,"endColumn":9},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":16,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":16,"endColumn":27},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":28,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":30,"endColumn":51},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":36,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":38,"endColumn":10}],"errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\r\n  ADD_PRODUCT_IN_CART,\r\n  REMOVE_PRODUCT_FROM_CART\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  cartProducts: []\r\n};\r\n\r\nexport default function cartInfoReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_PRODUCT_IN_CART:\r\n      const oldProduct = state.cartProducts.find(\r\n        ({ id }) => id === action.payload.id\r\n      );\r\n      let newCartArr = [];\r\n      if (oldProduct) {\r\n        newCartArr = state.cartProducts.map(product => {\r\n          if (product.id === action.payload.id) {\r\n            return {\r\n              ...product,\r\n              selectedQty: product.selectedQty + action.payload.selectedQty\r\n            };\r\n          }\r\n          return product;\r\n        });\r\n      }\r\n      const tempProductArr = oldProduct\r\n        ? newCartArr\r\n        : [action.payload, ...state.cartProducts];\r\n      return {\r\n        ...state,\r\n        cartProducts: tempProductArr\r\n      };\r\n    case REMOVE_PRODUCT_FROM_CART:\r\n      let removedProductArr = state.cartProducts.filter(function(obj) {\r\n        return obj.id !== action.payload.id;\r\n      });\r\n      return {\r\n        ...state,\r\n        cartProducts: removedProductArr\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\reducers\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\reducers\\productInfo.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\sagas\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\sagas\\watchers\\productInfoSaga.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":6,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":39}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { GET_PRODUCTS_SAGA } from \"../../actions/actionTypes\";\r\nimport { getProducts } from \"../../api/productApi\";\r\nimport { setProducts } from \"../../actions/productAction\";\r\n\r\nfunction* workerGetProductsSaga({ data }) {\r\n  try {\r\n    const response = yield call(getProducts);\r\n    const { products } = response.data;\r\n    yield put(setProducts(products));\r\n  } catch (e) {\r\n    console.log(\"Error Message ====>\", e);\r\n  }\r\n}\r\n\r\nexport function* watchGetProductsSaga() {\r\n  yield takeLatest(GET_PRODUCTS_SAGA, workerGetProductsSaga);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\serviceWorker.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":24,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":26,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":35,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":31}],"errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\setupTests.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\Boppo\\react-assignment\\src\\store\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]